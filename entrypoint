// Import necessary libraries
use solana_program::{
    account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey, program,
    program_pack::Pack, system_instruction,
};

// Define contract data structure
#[repr(C)]
pub struct LiquidityPool {
    pub owner: Pubkey,
    pub token_account: Pubkey, // Token account
    pub total_liquidity: u64,
    pub user_liquidity: Pubkey, // User liquidity tracking account
}

// Program entry point
#[entrypoint]
fn process_instruction(program_id: &Pubkey, accounts: &[AccountInfo], instruction_data: &[u8]) -> ProgramResult {
    // Parse account information
    let accounts_iter = &mut accounts.iter();
    let pool_account = next_account_info(accounts_iter)?;

    // Check if the correct program owns the contract
    if pool_account.owner != program_id {
        return Err(solana_program::program_error::ProgramError::IncorrectProgramId);
    }

    // Parse contract data
    let mut pool_data = LiquidityPool::unpack(&pool_account.data.borrow())?;

    // Handle different operations based on the instruction
    match instruction_data[0] {
        0 => {
            // Operation: Provide liquidity
            provide_liquidity(accounts_iter, &mut pool_data, instruction_data)?;
        }
        1 => {
            // Operation: Withdraw liquidity
            withdraw_liquidity(accounts_iter, &mut pool_data, instruction_data)?;
        }
        2 => {
            // Operation: Change contract owner (admin function)
            change_owner(accounts_iter, &mut pool_data, instruction_data)?;
        }
        _ => {
            // Invalid operation
            return Err(solana_program::program_error::ProgramError::InvalidInstructionData);
        }
    }

    // Update contract data
    LiquidityPool::pack(pool_data, &mut pool_account.data.borrow_mut())?;

    Ok(())
}

// Helper function: Provide liquidity
fn provide_liquidity<'a, 'b>(
    accounts_iter: &mut impl Iterator<Item = &'a AccountInfo<'b>>,
    pool_data: &mut LiquidityPool,
    instruction_data: &[u8],
) -> ProgramResult {
    let user_account = next_account_info(accounts_iter)?;
    let amount = u64::from_le_bytes(instruction_data[1..9].try_into().unwrap());

    // Check if the user provided enough funds
    let user_token_account = next_account_info(accounts_iter)?;
    let token_balance = user_token_account.try_borrow_data()?;
    let user_balance = u64::from_le_bytes(token_balance[0..8].try_into().unwrap());

    if user_balance < amount {
        return Err(solana_program::program_error::ProgramError::InsufficientFunds);
    }

    // Transfer funds to the contract account
    let transfer_ix = system_instruction::transfer(user_account.key, &pool_data.token_account, amount);
    solana_program::program::invoke(&[transfer_ix], accounts_iter)?;

    // Update user liquidity
    let user_liquidity_account = next_account_info(accounts_iter)?;
    let mut user_liquidity_data = UserLiquidity::unpack(&user_liquidity_account.data.borrow())?;
    user_liquidity_data.amount += amount;
    UserLiquidity::pack(user_liquidity_data, &mut user_liquidity_account.data.borrow_mut())?;

    // Update contract data
    pool_data.total_liquidity += amount;

    Ok(())
}

// Helper function: Withdraw liquidity
fn withdraw_liquidity<'a, 'b>(
    accounts_iter: &mut impl Iterator<Item = &'a AccountInfo<'b>>,
    pool_data: &mut LiquidityPool,
    instruction_data: &[u8],
) -> ProgramResult {
    let user_account = next_account_info(accounts_iter)?;
    let amount = u64::from_le_bytes(instruction_data[1..9].try_into().unwrap());

    // Check if the contract has enough liquidity
    if pool_data.total_liquidity < amount {
        return Err(solana_program::program_error::ProgramError::InsufficientFunds);
    }

    // Transfer funds to the user account
    let transfer_ix = system_instruction::transfer(&pool_data.token_account, user_account.key, amount);
    solana_program::program::invoke(&[transfer_ix], accounts_iter)?;

    // Update user liquidity
    let user_liquidity_account = next_account_info(accounts_iter)?;
    let mut user_liquidity_data = UserLiquidity::unpack(&user_liquidity_account.data.borrow())?;
    user_liquidity_data.amount -= amount;
    UserLiquidity::pack(user_liquidity_data, &mut user_liquidity_account.data.borrow_mut())?;

    // Update contract data
    pool_data.total_liquidity -= amount;

    Ok(())
}

// Helper function: Change contract owner (admin function)
fn change_owner<'a, 'b>(
    accounts_iter: &mut impl Iterator<Item = &'a AccountInfo<'b>>,
    pool_data: &mut LiquidityPool,
    instruction_data: &[u8],
) -> ProgramResult {
    // Check if the caller is the current owner (admin check)
    let caller_account = next_account_info(accounts_iter)?;
    if &pool_data.owner != caller_account.key {
        return Err(solana
